name: Playwright Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Generate storybook-static
        run: npx --yes storybook build -o storybook-static

      - name: Start static server
        run: |
          python3 -m http.server 8080 --directory storybook-static &
          echo "TEST_BASE_URL=http://localhost:8080" >> $GITHUB_ENV

      - name: Get latest successful run ID from main branch
        if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
        run: |
          owner=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f1)
          repo_name=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f2)
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.DS_ARTIFIACT_KEY }}" \
              "https://api.github.com/repos/$owner/$repo_name/actions/runs?branch=main&status=completed&per_page=1")
          run_count=$(echo "$response" | jq -r '.workflow_runs | length')
          if [ "$run_count" -eq 0 ] || [ "$(echo "$response" | jq -r '.workflow_runs[0].conclusion')" != "success" ]; then
            echo "No successful run found on main yet."
            echo "LATEST_RUN_ID=none" >> $GITHUB_ENV
          else
            run_id=$(echo "$response" | jq -r '.workflow_runs[0].id')
            echo "Found successful run ID: $run_id"
            echo "LATEST_RUN_ID=$run_id" >> $GITHUB_ENV
          fi
          echo "LATEST_RUN_ID is: $LATEST_RUN_ID"

      - name: Fetch artifact details
        if: github.event_name == 'pull_request' && env.LATEST_RUN_ID != 'none'
        id: artifact-details
        run: |
          artifacts=$(curl -s -H "Authorization: Bearer ${{ secrets.DS_ARTIFIACT_KEY }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ env.LATEST_RUN_ID }}/artifacts")
          echo "Artifacts response: $artifacts"
          artifact_url=$(echo "$artifacts" | jq -r '.artifacts[] | select(.name == "baseline-screenshots") | .archive_download_url')
          if [ -z "$artifact_url" ]; then
            echo "No artifact named 'baseline-screenshots' found in run $LATEST_RUN_ID"
            echo "ARTIFACT_URL=none" >> $GITHUB_ENV
          else
            echo "Found artifact URL: $artifact_url"
            echo "ARTIFACT_URL=$artifact_url" >> $GITHUB_ENV
          fi

      - name: Check for 'upload_pr_screenshots_report' and 'update-snapshots' labels
        id: check-labels
        if: github.event_name == 'pull_request'
        run: |
          # Convert labels to valid JSON and process them safely
          labels=$(echo '${{ toJson(github.event.pull_request.labels) }}' | jq 'map(.description |= if . == "" then null else . end)')

          echo "Processed labels JSON: $labels"

          # Check for the 'upload_pr_screenshots_report' label
          if echo "$labels" | jq -e '.[] | select(.name == "upload_pr_screenshots_report")' > /dev/null; then
            echo "Label 'upload_pr_screenshots_report' found. Setting UPLOAD_PR_SCREENSHOT_REPORT=true."
            echo "UPLOAD_PR_SCREENSHOT_REPORT=true" >> $GITHUB_ENV
          else
            echo "Label 'upload_pr_screenshots_report' not found."
            echo "UPLOAD_PR_SCREENSHOT_REPORT=false" >> $GITHUB_ENV
          fi

          # Check for the 'update-snapshots' label
          if echo "$labels" | jq -e '.[] | select(.name == "update-snapshots")' > /dev/null; then
            echo "Label 'update-snapshots' found. Setting UPDATE_SNAPSHOTS=true."
            echo "UPDATE_SNAPSHOTS=true" >> $GITHUB_ENV
          else
            echo "Label 'update-snapshots' not found."
            echo "UPDATE_SNAPSHOTS=false" >> $GITHUB_ENV
          fi

      - name: Download artifact from another workflow
        if: github.event_name == 'pull_request' && env.UPDATE_SNAPSHOTS != 'true' && env.ARTIFACT_URL != 'none'
        run: |
          echo "Downloading artifact from: $ARTIFACT_URL"
          curl -L -H "Authorization: Bearer ${{ secrets.DS_ARTIFIACT_KEY }}" \
              -o baseline-screenshots.zip "$ARTIFACT_URL"
          mkdir -p tests/visual.spec.ts-snapshots
          unzip -o baseline-screenshots.zip -d tests/visual.spec.ts-snapshots
          rm baseline-screenshots.zip

      - name: Check if baseline exists
        id: baseline-check
        run: |
          if [ "${{ env.UPDATE_SNAPSHOTS }}" = "true" ]; then
            echo "Skipping baseline check because 'update-snapshots' label is present."
            echo "HAS_BASELINE=false" >> $GITHUB_ENV
          elif [ -d "tests/visual.spec.ts-snapshots" ] && [ "$(ls -A tests/visual.spec.ts-snapshots)" ]; then
            echo "Baseline found."
            echo "HAS_BASELINE=true" >> $GITHUB_ENV
          else
            echo "No baseline found."
            echo "HAS_BASELINE=false" >> $GITHUB_ENV
          fi

      - name: Install Playwright
        run: npx --yes playwright install

      - name: Run Playwright tests
        id: playwright-tests
        run: |
          if [ "${{ env.UPDATE_SNAPSHOTS }}" = "true" ]; then
            echo "Updating snapshots because 'update-snapshots' label is present."
            npx playwright test --update-snapshots
          elif [ "${{ env.HAS_BASELINE }}" = "true" ]; then
            echo "Running regression tests with existing baseline."
            npx playwright test
          else
            echo "No baseline available, generating initial screenshots."
            npx playwright test --update-snapshots
          fi

      - name: Upload PR screenshots and report for review
        if: ${{ env.UPLOAD_PR_SCREENSHOT_REPORT == 'true' && github.event_name == 'pull_request' && !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: pr-screenshots-and-report-${{ github.run_id }}
          path: |
            tests/visual.spec.ts-snapshots/**
            playwright-report/
          retention-days: 1

      - name: Upload baseline screenshots
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.playwright-tests.outcome == 'success' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: baseline-screenshots
          path: tests/visual.spec.ts-snapshots/**
          retention-days: 30

      - name: Upload report
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
